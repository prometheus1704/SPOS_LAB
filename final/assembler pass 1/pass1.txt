import java.io.*;
//ASSEMBLER PASS 1
class Main {
    public static void main(String[] args) throws Exception {
        // Directly specify the input file name
        String inputFileName = "input.txt";

        // Create FileReader and BufferedReader
        FileReader fileReader = new FileReader(inputFileName);
        BufferedReader bufferedReader = new BufferedReader(fileReader);

        String line = null;
        int line_count = 0, LC = 0, symTabLine = 0, opTabLine = 0, litTabLine = 0, poolTabLine = 0;

        // Data Structures
        final int MAX = 100;
        String[][] SymbolTab = new String[MAX][3];
        String[][] OpTab = new String[MAX][3];
        String[][] LitTab = new String[MAX][2];
        int[] PoolTab = new int[MAX];
        int litTabAddress = 0;

        System.out.println("___________________________________________________");
        while ((line = bufferedReader.readLine()) != null) {
            String[] tokens = line.split("\t");
            if (line_count == 0) {
                LC = Integer.parseInt(tokens[2]); // Set LC to operand of START
                for (String token : tokens) // Print the input program
                    System.out.print(token + "\t");
                System.out.println("");
            } else {
                for (String token : tokens) // Print the input program
                    System.out.print(token + "\t");
                System.out.println("");

                if (!tokens[0].equals("")) {
                    // Inserting into Symbol Table
                    SymbolTab[symTabLine][0] = tokens[0];
                    SymbolTab[symTabLine][1] = Integer.toString(LC);
                    SymbolTab[symTabLine][2] = Integer.toString(1);
                    symTabLine++;
                } else if (tokens[1].equalsIgnoreCase("DS") || tokens[1].equalsIgnoreCase("DC")) {
                    // Entry into symbol table for declarative statements
                    SymbolTab[symTabLine][0] = tokens[0];
                    SymbolTab[symTabLine][1] = Integer.toString(LC);
                    SymbolTab[symTabLine][2] = Integer.toString(1);
                    symTabLine++;
                }

                if (tokens.length == 3 && tokens[2].charAt(0) == '=') {
                    // Entry of literals into literal table
                    LitTab[litTabLine][0] = tokens[2];
                    LitTab[litTabLine][1] = Integer.toString(LC);
                    litTabLine++;
                } else if (tokens[1] != null) {
                    // Entry of Mnemonic in opcode table
                    OpTab[opTabLine][0] = tokens[1];

                    if (tokens[1].equalsIgnoreCase("START") || tokens[1].equalsIgnoreCase("END")
                            || tokens[1].equalsIgnoreCase("ORIGIN") || tokens[1].equalsIgnoreCase("EQU")
                            || tokens[1].equalsIgnoreCase("LTORG")) { // If Assembler Directive
                        OpTab[opTabLine][1] = "AD";
                        OpTab[opTabLine][2] = "R11";
                    } else if (tokens[1].equalsIgnoreCase("DS") || tokens[1].equalsIgnoreCase("DC")) {
                        OpTab[opTabLine][1] = "DL";
                        OpTab[opTabLine][2] = "R7";
                    } else {
                        OpTab[opTabLine][1] = "IS";
                        OpTab[opTabLine][2] = "(04,1)";
                    }
                    opTabLine++;
                }
            }
            line_count++;
            LC++;
        }

        System.out.println("___________________________________________________");

        // Print symbol table
        System.out.println("\n\n\tSYMBOL TABLE\t\t");
        System.out.println("--------------------------");
        System.out.println("SYMBOL\tADDRESS\tLENGTH");
        System.out.println("--------------------------");
        for (int i = 0; i < symTabLine; i++)
            System.out.println(SymbolTab[i][0] + "\t" + SymbolTab[i][1] + "\t" + SymbolTab[i][2]);
        System.out.println("--------------------------");

        // Print opcode table
        System.out.println("\n\n\tOPCODE TABLE\t\t");
        System.out.println("----------------------------");
        System.out.println("MNEMONIC\tCLASS\tINFO");
        System.out.println("----------------------------");
        for (int i = 0; i < opTabLine; i++)
            System.out.println(OpTab[i][0] + "\t\t" + OpTab[i][1] + "\t" + OpTab[i][2]);
        System.out.println("----------------------------");

        // Print literal table
        System.out.println("\n\n\tLITERAL TABLE\t\t");
        System.out.println("-----------------");
        System.out.println("LITERAL\tADDRESS");
        System.out.println("-----------------");
        for (int i = 0; i < litTabLine; i++)
            System.out.println(LitTab[i][0] + "\t" + LitTab[i][1]);
        System.out.println("------------------");

        // Initialization of POOLTAB
        for (int i = 0; i < litTabLine; i++) {
            if (LitTab[i][0] != null && LitTab[i + 1][0] != null) { // If literals are present
                if (i == 0) {
                    PoolTab[poolTabLine] = i + 1;
                    poolTabLine++;
                } else if (Integer.parseInt(LitTab[i][1]) < (Integer.parseInt(LitTab[i + 1][1])) - 1) {
                    PoolTab[poolTabLine] = i + 2;
                    poolTabLine++;
                }
            }
        }

        // Print pool table
        System.out.println("\n\n\tPOOL TABLE\t\t");
        System.out.println("-----------------");
        System.out.println("LITERAL NUMBER");
        System.out.println("-----------------");
        for (int i = 0; i < poolTabLine; i++)
            System.out.println(PoolTab[i]);
        System.out.println("------------------");

        // Generate Intermediate Code
        generateIntermediateCode(OpTab, opTabLine, SymbolTab, symTabLine, LitTab, litTabLine);

        // Always close files
        bufferedReader.close();
    }

    private static void generateIntermediateCode(String[][] OpTab, int opTabLine, String[][] SymbolTab, int symTabLine, String[][] LitTab, int litTabLine) {
    System.out.println("\n\n\tINTERMEDIATE CODE\t\t");
    System.out.println("--------------------------------");
    System.out.println("FORMAT");
    System.out.println("--------------------------------");

    // Iterate over the opcode table
    for (int i = 0; i < opTabLine; i++) {
        String mnemonic = OpTab[i][0];
        String operand1 = "";
        String operand2 = "";

        // Determine the format of the intermediate code entry
        if (mnemonic.equalsIgnoreCase("START")) {
            // For START directive
            System.out.println("(AD,01)(C," + OpTab[i][2] + ")");
        } else if (mnemonic.equalsIgnoreCase("END")) {
            // For END directive
            System.out.println("(AD,02)");
        } else if (mnemonic.equalsIgnoreCase("ORIGIN")) {
            // For ORIGIN directive
            System.out.println("(AD,03)(S," + SymbolTab[symTabLine - 1][0] + ")");
        } else if (mnemonic.equalsIgnoreCase("EQU")) {
            // For EQU directive
            System.out.println("(AD,03)(S," + SymbolTab[symTabLine - 1][0] + ")");
        } else if (mnemonic.equalsIgnoreCase("LTORG")) {
            // For LTORG directive
            System.out.println("(AD,04)");
        } else if (mnemonic.equalsIgnoreCase("DS")) {
            // For DS directive
            System.out.println("(DL,01)(C," + OpTab[i][2] + ")");
        } else if (mnemonic.equalsIgnoreCase("DC")) {
            // For DC directive
            System.out.println("(DL,01)(C," + OpTab[i][2] + ")");
        } else {
            // For operation mnemonics
            operand1 = OpTab[i][1]; // Class of operation
            if (OpTab[i][2].startsWith("(")) {
                operand2 = OpTab[i][2]; // Operand
            } else {
                // Find the corresponding symbol
                for (int j = 0; j < symTabLine; j++) {
                    if (SymbolTab[j][0].equals(OpTab[i][2])) {
                        operand2 = "(S," + (j + 1) + ")"; // Assuming symbols are 1-indexed
                        break;
                    }
                }
            }
            System.out.println("(IS," + operand1 + ")" + operand2);
        }
    }
    System.out.println("--------------------------------");
}

     
}