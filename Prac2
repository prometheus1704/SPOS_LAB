import java.io.*;
import java.util.*;

public class MacroProcessor {

    public static class Pass1 {
        private List<String[]> mnt = new ArrayList<>();
        private List<String> mdt = new ArrayList<>();
        private Map<String, List<String>> ala = new LinkedHashMap<>();
        private Map<String, List<String>> macroDefinitions = new LinkedHashMap<>();
        private Map<String, Integer> mntIndexMap = new LinkedHashMap<>();
        private boolean inMacroDefinition = false;
        private String currentMacroName = null;

        private int nextParamIndex = 1;
        private Map<String, Map<String, Integer>> macroParamIndices = new LinkedHashMap<>();
        private Map<String, Integer> macroStartIndices = new LinkedHashMap<>();
        private List<String> macroOrder = new ArrayList<>();
        private List<String> pass1Output = new ArrayList<>();

        public void processSourceCode(List<String> sourceCode) {
            for (String line : sourceCode) {
                line = line.trim();

                if (line.startsWith("MACRO")) {
                    handleMacroStart(line);
                } else if (line.equals("MEND")) {
                    handleMacroEnd();
                } else if (inMacroDefinition) {
                    handleMacroInstruction(line);
                } else {
                    pass1Output.add(line);
                }
            }

            if (inMacroDefinition) {
                System.err.println("Warning: File ended while still inside a macro definition.");
            }

            updateMNTIndices();
            adjustALAIndices();
            substituteMDTParameters();

            printMNT();
            printMDT();
            printALA();
            printPass1Output();
        }

        private void handleMacroStart(String line) {
            if (inMacroDefinition) {
                System.err.println("Unexpected MACRO definition while already inside a macro definition.");
                return;
            }

            inMacroDefinition = true;
            String[] parts = line.split("\\s+");
            if (parts.length < 2) {
                System.err.println("Invalid MACRO definition: " + line);
                return;
            }

            currentMacroName = parts[1];
            List<String> params = Arrays.asList(parts).subList(2, parts.length);

            macroOrder.add(currentMacroName);

            int startIndex = nextParamIndex;
            macroStartIndices.put(currentMacroName, startIndex);

            Map<String, Integer> paramIndices = new LinkedHashMap<>();
            int lastIndex = startIndex;

            for (String param : params) {
                if (!param.equals("&REG")) {
                    paramIndices.put(param, lastIndex++);
                }
            }

            if (params.contains("&REG")) {
                paramIndices.put("&REG", lastIndex++);
            }

            nextParamIndex = lastIndex;

            macroParamIndices.put(currentMacroName, paramIndices);

            List<String> indexedParams = new ArrayList<>();
            for (Map.Entry<String, Integer> entry : paramIndices.entrySet()) {
                indexedParams.add(entry.getKey() + "=" + entry.getValue());
            }
            ala.put(currentMacroName, indexedParams);

            macroDefinitions.put(currentMacroName, new ArrayList<>());
            mntIndexMap.put(currentMacroName, mdt.size());
        }

        private void handleMacroEnd() {
            if (!inMacroDefinition) {
                System.err.println("MEND encountered without a matching MACRO definition.");
                return;
            }

            inMacroDefinition = false;
            if (currentMacroName != null) {
                mdt.add("MEND");
            }
        }

        private void handleMacroInstruction(String line) {
            if (currentMacroName != null) {
                macroDefinitions.get(currentMacroName).add(line);
                mdt.add(line);
            }
        }

        private void updateMNTIndices() {
    int currentIndex = 1;
    for (String macro : macroOrder) {
        mnt.add(new String[]{macro, String.valueOf(currentIndex)});
        currentIndex += getMacroLength(macro) + 1; // +1 for MEND
    }
}
        private void adjustALAIndices() {
            for (Map.Entry<String, List<String>> entry : ala.entrySet()) {
                String macroName = entry.getKey();
                List<String> params = entry.getValue();
                Map<String, Integer> paramIndices = macroParamIndices.get(macroName);

                List<String> updatedParams = new ArrayList<>();
                for (String param : params) {
                    String[] parts = param.split("=");
                    String paramName = parts[0];
                    int index = paramIndices.getOrDefault(paramName, -1);
                    updatedParams.add(paramName + "=" + (index >= 0 ? index : nextParamIndex++));
                }
                ala.put(macroName, updatedParams);
            }
        }

        private void substituteMDTParameters() {
            List<String> updatedMDT = new ArrayList<>();

            for (String line : mdt) {
                String updatedLine = line;

                if (line.equals("MEND")) {
                    updatedMDT.add(line);
                    continue;
                }

                for (Map.Entry<String, Map<String, Integer>> entry : macroParamIndices.entrySet()) {
                    String macroName = entry.getKey();
                    Map<String, Integer> paramIndices = entry.getValue();

                    for (Map.Entry<String, Integer> paramEntry : paramIndices.entrySet()) {
                        String paramName = paramEntry.getKey();
                        Integer paramValue = paramEntry.getValue();
                        updatedLine = updatedLine.replace(paramName, "#" + paramValue);
                    }
                }

                updatedMDT.add(updatedLine);
            }
            mdt = updatedMDT;
        }

       private int getMacroLength(String macroName) {
    List<String> macroLines = macroDefinitions.get(macroName);
    return macroLines != null ? macroLines.size() + 1 : 1; // +1 for MEND
}

        private void printMNT() {
            System.out.println("MNT:");
            for (String[] entry : mnt) {
                System.out.println("Macro: " + entry[0] + " Index: " + entry[1]);
            }
        }

        private void printMDT() {
            System.out.println("MDT:");
            for (String entry : mdt) {
                System.out.println(entry);
            }
        }

        private void printALA() {
            System.out.println("ALA:");
            for (Map.Entry<String, List<String>> entry : ala.entrySet()) {
                String macroName = entry.getKey();
                List<String> params = entry.getValue();
                System.out.print("Macro: " + macroName + " Parameters: {");
                System.out.print(String.join(", ", params));
                System.out.println("}");
            }
        }

        private void printPass1Output() {
            System.out.println("Pass 1 Output:");
            for (String line : pass1Output) {
                System.out.println(line);
            }
        }

        public List<String[]> getMNT() {
            return mnt;
        }

        public List<String> getMDT() {
            return mdt;
        }

        public Map<String, List<String>> getALA() {
            return ala;
        }

        public List<String> getPass1Output() {
            return pass1Output;
        }
    }

    public static class Pass2 {
        private List<String[]> mnt;
        private List<String> mdt;
        private Map<String, List<String>> ala;
        private List<String> expandedCode;

        public Pass2(List<String[]> mnt, List<String> mdt, Map<String, List<String>> ala) {
            this.mnt = mnt;
            this.mdt = mdt;
            this.ala = ala;
            this.expandedCode = new ArrayList<>();
        }

        public void processSourceCode(List<String> sourceCode) {
            for (String line : sourceCode) {
                line = line.trim();
                String[] parts = line.split("\\s+");
                
                if (isMacroCall(parts[0])) {
                    expandMacro(parts);
                } else {
                    expandedCode.add(line);
                }
            }

            printExpandedCode();
        }

        private boolean isMacroCall(String instruction) {
            for (String[] entry : mnt) {
                if (entry[0].equals(instruction)) {
                    return true;
                }
            }
            return false;
        }

        private void expandMacro(String[] macroCall) {
            String macroName = macroCall[0];
            int mdtIndex = getMDTIndex(macroName);
            List<String> arguments = Arrays.asList(macroCall).subList(1, macroCall.length);

            Map<String, String> paramMap = createParamMap(macroName, arguments);

            for (int i = mdtIndex; i < mdt.size(); i++) {
                String instruction = mdt.get(i);
                if (instruction.equals("MEND")) {
                    break;
                }

                for (Map.Entry<String, String> entry : paramMap.entrySet()) {
                    instruction = instruction.replace("#" + entry.getKey(), entry.getValue());
                }

                expandedCode.add(instruction);
            }
        }

        private int getMDTIndex(String macroName) {
            for (String[] entry : mnt) {
                if (entry[0].equals(macroName)) {
                    return Integer.parseInt(entry[1]) - 1;
                }
            }
            return -1;
        }

        private Map<String, String> createParamMap(String macroName, List<String> arguments) {
            Map<String, String> paramMap = new HashMap<>();
            List<String> parameters = ala.get(macroName);

            for (int i = 0; i < parameters.size(); i++) {
                String[] parts = parameters.get(i).split("=");
                String paramName = parts[1];
                String argValue = i < arguments.size() ? arguments.get(i) : "";
                paramMap.put(paramName, argValue);
            }

            return paramMap;
        }

        private void printExpandedCode() {
            System.out.println("Expanded Code:");
            for (String line : expandedCode) {
                System.out.println(line);
            }
        }
    }

    public static void main(String[] args) {
        String fileName = "input_file.txt";
        List<String> sourceCode = new ArrayList<>();

        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            while ((line = br.readLine()) != null) {
                sourceCode.add(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        Pass1 pass1 = new Pass1();
        pass1.processSourceCode(sourceCode);

        Pass2 pass2 = new Pass2(pass1.getMNT(), pass1.getMDT(), pass1.getALA());
        pass2.processSourceCode(pass1.getPass1Output());
    }
}
